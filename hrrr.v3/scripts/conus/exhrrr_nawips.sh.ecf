#!/bin/ksh
###################################################################
echo "----------------------------------------------------"
echo "exnawips - convert NCEP GRIB files into GEMPAK Grids"
echo "----------------------------------------------------"
echo "History: Mar 2000 - First implementation of this new script."
echo "S Lilly: May 2008 - add logic to make sure that all of the "
echo "                    data produced from the restricted ECMWF"
echo "                    data on the CCS is properly protected."
#####################################################################

set -xa

msg="Begin job for $job"
postmsg "$jlogfile" "$msg"

export RUN=$1
export GRIB=$2
export DBN_ALERT_TYPE=$3
export EXT=$4

export 'PS4=$RUN:$SECONDS + '

cd $DATA
# JY $utilscript/setup.sh

NAGRIB_TABLE=${NAGRIB_TABLE:-${NWROOTp1}/gempak/fix/nagrib.tbl}
NAGRIB=nagrib2
cp ${FIXgem}/hrrr_g2varsncep1.tbl g2varsncep1.tbl
cp ${FIXgem}/fix/hrrr_g2varswmo2.tbl g2varswmo2.tbl
cp ${FIXgem}/fix/hrrr_g2vcrdncep1.tbl g2vcrdncep1.tbl
cp ${FIXgem}/fix/hrrr_g2vcrdwmo2.tbl g2vcrdwmo2.tbl

# settings for nagrib2
cpyfil=gds
garea=dset
gbtbls=
maxgrd=4999
kxky=
grdarea=
proj=
output=T
pdsext=no

maxtries=180
fhcnt=$fstart
while [ $fhcnt -le $fend ] ; do
  if [ $fhcnt -ge 100 ] ; then
    typeset -Z3 fhr
  else
    typeset -Z2 fhr
  fi
  fhr=$fhcnt

  fhr3=$fhcnt
  typeset -Z3 fhr3
  GRIBIN=$COMIN/${model}.${cycle}.${GRIB}f${fhr}.grib2
  GEMGRD=${RUN}_${PDY}${cyc}f${fhr3}'00'
  NAGRIB=nagrib2
  GRIBIN_chk=$GRIBIN.idx

  icnt=1
  while [ $icnt -lt 1000 ]
  do
    if [ -r $GRIBIN_chk ] ; then
      sleep 10                               # sleep 10 to avoid GRIBIN not being ready
      break
    else
      let "icnt=icnt+1"
      sleep 20
    fi
    if [ $icnt -ge $maxtries ]
    then
      msg="ABORTING after 1 hour of waiting for F$fhr to end."
      err_exit $msg
    fi
  done

  cp $GRIBIN grib$fhr

  startmsg

  $GEMEXE/$NAGRIB << EOF
   GBFILE   = grib$fhr
   INDXFL   = 
   GDOUTF   = $GEMGRD
   PROJ     = $proj
   GRDAREA  = $grdarea
   KXKY     = $kxky
   MAXGRD   = $maxgrd
   CPYFIL   = $cpyfil
   GAREA    = $garea
   OUTPUT   = $output
   GBTBLS   = $gbtbls
   GBDIAG   = 
   PDSEXT   = $pdsext
  l
  r
EOF
  export err=$?;err_chk

  #####################################################
  # GEMPAK DOES NOT ALWAYS HAVE A NON ZERO RETURN CODE
  # WHEN IT CAN NOT PRODUCE THE DESIRED GRID.  CHECK
  # FOR THIS CASE HERE.
  #####################################################
  gpend

  if [ $SENDCOM = "YES" ] ; then
     # JY mv $GEMGRD $COMOUT/$GEMGRD
     mv $GEMGRD $COMOUT/.${GEMGRD}
     mv $COMOUT/.${GEMGRD} $COMOUT/${GEMGRD}
     if [ $SENDDBN = "YES" ] ; then
       $DBNROOT/bin/dbn_alert MODEL ${DBN_ALERT_TYPE}${ALERT_EXT} $job \
           $COMOUT/$GEMGRD
     else
       echo "##### DBN_ALERT_TYPE is: ${DBN_ALERT_TYPE}${ALERT_EXT} #####"
     fi
  fi

  let fhcnt=fhcnt+finc
done

#if [ $RUN = hrrr ]; then 
#  ecflow_client --event release_meta
#fi

#####################################################################
# GOOD RUN
set +x
echo "**************JOB $RUN NAWIPS COMPLETED NORMALLY"
echo "**************JOB $RUN NAWIPS COMPLETED NORMALLY"
echo "**************JOB $RUN NAWIPS COMPLETED NORMALLY"
set -x
#####################################################################

msg='Job completed normally.'
echo $msg
postmsg "$jlogfile" "$msg"

############################### END OF SCRIPT #######################
