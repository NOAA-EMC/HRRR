
These are instructions for restarting a HRRR forecast job that stalls.  Without the restart capability, a forecast that stalls must be restarted.

Steps:
1)  Copy the hrrr_fcst_prod_XX run directory to another location in case debugging is needed later.
2)  NCO needs to have a kickoff script to launch this process for all possible cycles.
3)  If a forecast job stalls, launch the restart job for the given cycle.  Note that if the stalled forecast job has not made it to at least hour 3, the restart job will not work, and the forecast job must be launched again from the start.
4)  The files that are needed for running the post jobs will be copied back to the main forecast directory.  The post mananger will be able to process them unless it times out, in which case the post manager job must be resubmitted.   Note that all of the fcstdone and wrfout files are moved back into the hrrr_fcst_prod_XX directory simultaneously after the forecast has completed.   There is no way to move them on the fly due to needing to rename them.

-------------------------------------------

More Detailed Information:
(1)The run directory should access a partially completed HRRR forecast job directory, including all available fcstdone and wrfout (history) files along with the full wrfbdy file.  The run directory is a new location (hrrr_fcst_restart_prod_XX) where the restart will be executed. 

(2) The script requires a one-to-one correspondence between fcstdone and completed wrfout files and assumes there are four wrfouts per forecast hour.  This requirement should not be a problem since every wrfout file completion is immediately followed by the creation of a corresponding fcstdone file.  Partially completed wrfout files are not a problem since there will be no corresponding fcstdone file.

(3) This script is designed to restart the HRRR forecast job at the last completed forecast length divisible by three and then run to completion.  This requirement is to ensure boundary condition alignment since we only update the boundary conditions every three hours into the forecast.  Therefore, if the forecast job doesn't originally reach hour three, then it must restart from the beginning (as opposed to hour two).  This requirement means there will be, at most, no more than two forecast hours of overlap between the original run and the restarted run.

(4) This script will modify the wrfout (history) file metadata and fcstdone filenames once the forecast executable (integration) completes to mimic output as if the forecast job had actually been started at the original cycle start time.  Once these changes occur, this should trigger the post manager and allow for proper labelling of the post output.


Here is the logic to the script:

The script begins by determining the original cycle start time from the name of the very first wrfout file (0-hr).  Once this is done, the script determines the last completed forecast hour divisible by three by looking through the available fcstdone files.  Next the script builds a file count based on this last forecast hour and copies the completed fcstdone and last wrfout file to the output location (along with the wrfbdy file).  The script then sets a link from the last forecast wrfout to wrfinput and determines the format of the new start time along with the remaining forecast length while preserving the original start time for later use.  The wrf namelist is then modified to reflect this new start time and the wrf executable is called.  Once integration is complete, the wrfout file metadata is modified to revert the start times to the original values (for the benefit of the post time labels) and the new fcstdone filenames are renamed accordingly (for the benefit of the post manager).

