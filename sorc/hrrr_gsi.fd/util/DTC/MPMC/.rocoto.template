<?xml version="1.0" encoding="UTF-8"?> 
<!--MPMC rocoto workflow template, by Guoqing Ge, 2018/8/30 -->
<!DOCTYPE workflow [
<!ENTITY ACCOUNT "comgsi">
<!ENTITY QUEUE "batch">
<!ENTITY SCHEDULER "moabtorque">
<!ENTITY COMPILE_PROC "8">
<!ENTITY ENKF_PROC "24">
<!ENTITY GSI_PROC "4">
<!ENTITY WALLTIME "00:30:00">
<!ENTITY BUILD_ROOT "/scratch4/BMC/comgsi/gge/MPMC/MPMCtest/build">
<!ENTITY MPMC_ROOT "/scratch4/BMC/comgsi/gge/MPMC/MPMCtest">
<!ENTITY NATIVE "">

<!ENTITY build_ID "ti01 ti02">
<!ENTITY compiler "intel_18.1.163 intel_18.0.1.163"> 
<!ENTITY mpi "impi_5.1.2.150 impi_5.1.2.150">
<!ENTITY case_ID "case01-oneobs-glb case02-oneobs-nam">
<!ENTITY casenum "case01 case02">
<!ENTITY enkf_ID "case22-enkf-conv case24-enkf-allobs case26-enkf-gfs">
<!ENTITY enkfnum "case22 case24 case26">
<!ENTITY enkf_dependent "case21 case23 case25">
]>


<workflow realtime="F" scheduler="&SCHEDULER;" cyclethrottle="8" cyclelifespan="60:00:00:00" taskthrottle="160">

  <log>
    &BUILD_ROOT;/log.workflow
  </log>

  <cycledef group="always">00 08 28 08 2018 *</cycledef>

<!--  Don't need to manage compiling jobs (too few) in rocoto, but save the code just in case
  <metatask name="compile" throttle="10000">
    <var name="build_ID">&build_ID;</var>
    <var name="compiler">&compiler;</var>
    <var name="mpi">&mpi;</var>

    <task name="compile-#build_ID#" cycledefs="always" maxtries="1">
      <walltime>&WALLTIME;</walltime>
      <native>&NATIVE;</native>
      <queue>&QUEUE;</queue>
      <account>&ACCOUNT;</account>
      <cores>&COMPILE_PROC;</cores>
      <nodesize>&COMPILE_PROC;</nodesize>
      <jobname>#build_ID#.#compiler#.#mpi#</jobname>
      <join>&BUILD_ROOT;/#build_ID#.#compiler#.#mpi#/output.#build_ID#</join>
      <command>&BUILD_ROOT;/#build_ID#.#compiler#.#mpi#/compile.sh</command>
    </task>
  </metatask>
-->

  <metatask name="gsi">
    <var name="build_ID">&build_ID;</var>
    <var name="compiler">&compiler;</var>
    <var name="mpi">&mpi;</var>
    <metatask>
      <var name="case_ID">&case_ID;</var>
      <var name="casenum">&casenum;</var>
      <task name="#build_ID#-#casenum#" cycledefs="always" maxtries="1">
        <walltime>&WALLTIME;</walltime>
        <native>&NATIVE;</native>
        <queue>&QUEUE;</queue>
        <account>&ACCOUNT;</account>
        <cores>&GSI_PROC;</cores>
        <nodesize>&GSI_PROC;</nodesize>
        <jobname>#build_ID#-#case_ID#</jobname>
        <join>&BUILD_ROOT;/#build_ID#.#compiler#.#mpi#/run/out.#case_ID#</join>
        <command>&BUILD_ROOT;/#build_ID#.#compiler#.#mpi#/run/run.#case_ID#</command>
        <dependency>
          <and>
            <!-- force to wait until all three executables are available to avoid gsi.x maybe overwritten during the 2nd compiling step -->
            <datadep age="00:02:00">&BUILD_ROOT;/#build_ID#.#compiler#.#mpi#/bin/gsi.x</datadep>
            <datadep age="00:02:00">&BUILD_ROOT;/#build_ID#.#compiler#.#mpi#/bin/enkf_wrf.x</datadep>
            <datadep age="00:02:00">&BUILD_ROOT;/#build_ID#.#compiler#.#mpi#/bin/enkf_gfs.x</datadep>
            <datadep>&BUILD_ROOT;/#build_ID#.#compiler#.#mpi#/done.compiling</datadep>
          </and>
        </dependency>
      </task>
    </metatask>
  </metatask>

  <metatask name="enkf">
    <var name="build_ID">&build_ID;</var>
    <var name="compiler">&compiler;</var>
    <var name="mpi">&mpi;</var>
    <metatask>
      <var name="enkf_ID">&enkf_ID;</var>
      <var name="enkfnum">&enkfnum;</var>
      <var name="dependent">&enkf_dependent;</var>
      <task name="#build_ID#-#enkfnum#" cycledefs="always" maxtries="1">
        <walltime>&WALLTIME;</walltime>
        <native>&NATIVE;</native>
        <queue>&QUEUE;</queue>
        <account>&ACCOUNT;</account>
        <cores>&ENKF_PROC;</cores>
        <nodesize>&ENKF_PROC;</nodesize>
        <jobname>#build_ID#-#enkf_ID#</jobname>
        <join>&BUILD_ROOT;/#build_ID#.#compiler#.#mpi#/run/out.#enkf_ID#</join>
        <command>&BUILD_ROOT;/#build_ID#.#compiler#.#mpi#/run/run.#enkf_ID#</command>
        <dependency>
          <and>
            <datadep age="00:02:00">&BUILD_ROOT;/#build_ID#.#compiler#.#mpi#/bin/gsi.x</datadep>
            <datadep age="00:02:00">&BUILD_ROOT;/#build_ID#.#compiler#.#mpi#/bin/enkf_wrf.x</datadep>
            <datadep age="00:02:00">&BUILD_ROOT;/#build_ID#.#compiler#.#mpi#/bin/enkf_gfs.x</datadep>
            <taskdep task="#build_ID#-#dependent#"/>
          </and>
        </dependency>
      </task>
    </metatask>
  </metatask>

<!--- drop report task in rocoto, too complicated to implment
  <task name="report" cycledefs="always" maxtries="1">
    <walltime>00:03:00</walltime>
    <native>&NATIVE;</native>
    <queue>&QUEUE;</queue>
    <account>&ACCOUNT;</account>
    <cores>1</cores>
    <nodesize>1</nodesize>
    <jobname>report</jobname>
    <join>&BUILD_ROOT;/out.report</join>
    <command>&MPMC_ROOT;/report.ksh</command>
    <dependency>
      <or>
        <datadep>&MPMC_ROOT;/.force.report</datadep>
        <metataskdep metatask="enkf"/>
      </or>
    </dependency>
  </task>
-->

</workflow>
