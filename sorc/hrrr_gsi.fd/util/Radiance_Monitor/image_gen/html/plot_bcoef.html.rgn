<!doctype html>
<HTML>
<head>
    <!-- ****************************************************-->
    <!-- Bcoef Plot via Google Charts (javascript extension) -->
    <!-- ****************************************************-->


    <!-- load google chart api and local copy of date.format.js -->
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <script type="text/javascript" src="jsuri-1.1.1.js"></script>
    <script type="text/javascript" src="stats.js"></script>


    <SCRIPT type="text/javascript">

        google.load("visualization", "1", {packages:["corechart"]});

        // on document load event fire the drawCharts() function
        google.setOnLoadCallback(drawCharts);


        // array for retrieved data from the csv file
        var chanData   = [];    // channel meta-data
        var chartData  = [];    // chart data structure

        var data1;              // data container for chart 1

        var url    = window.location.href;

        var initialLoad = true;

        // These are numeric values corresponding to UI select list values
        var curStat;
        var curChan;
        var curSrc;

        // This is the plain text name of the sat/instrument source.
        var curSrcName;
        var curStatName;



        /* -----------------------------------
         *  drawCharts, main drawing function
         * ----------------------------------- */
        function drawCharts() {
            //log ( "--> drawCharts");

            // Handles to the selection lists in the UI.
            var platformSel  = document.getElementById("platformSelect");
            var statSel      = document.getElementById("statSelect");
            var chanSel      = document.getElementById("chanSelect");

            var targetChan;

            /*
             *  Pull the data source from the url sent to this page
             */
            var url = window.location.href;


            /* ---------------------------------------------------------
             * loadChanData requests data from [satname].chan.txt file
             * ---------------------------------------------------------*/
            function loadChanData( file ){
                log( '--> loadChanData ' + file );
                if (window.XMLHttpRequest) {
                    // IE7+, Firefox, Chrome, Opera, Safari
                    var request = new XMLHttpRequest();
                }
                else {
                    // code for IE6, IE5
                    var request = new ActiveXObject('Microsoft.XMLHTTP');
                }

                // load file
                //   The request object is used to get the file from the server.  Note that this is object oriented
                //   programming, not procedural.
                //
                //   The request.open sets the server instruction to get the requested data file asynchronously.
                //   Synchronous requests are still possible but most browsers have deprecated that option and will
                //   eventually remove it.
                //
                //   The request.onload() function specifies the actions to take when the data file is loaded;
                //   the request.status of 200 indicates the load was successful, and request.readystate 4
                //   indicates the transaction is complete.  The readyState test is included as a sanity check;
                //   the onload function should only fire when the load is complete or terminated.  The check
                //   on request.status is necessary; there's no guarantee that the request was successful.
                //   A warning is dumped to the log in the event of failure, but unless the user has a web
                //   console (term may vary with browser) open s/he won't see it.
                //
                //   The request.send() method actually initiates the processing of the request.

                request.open('GET', file, true);
                request.onload = function(e) {
                    if( request.status === 200 && request.readyState === 4 ) {
                        parseChanData( request.responseText);
                        fillChanData();

                        // after the channel data is loaded load the data file for the currently selected
                        // source and channel
                        var dataFile = './pngs/bcoef/' + curSrcName + '.' + curChan + '.bcoef.txt';
                        loadData( dataFile );
                    }
                    else {
                        log (" Failed to load " + file + " ; request.status = " + request.status );
                    }
                }
                request.send();

                log( '<-- loadChanData');
            }

            /* ---------------------------------------------------------
             * parseChanData loads channel data into the chanData array
             * --------------------------------------------------------- */
            function parseChanData( data ){
                log( '--> parseChanData' );

                //replace UNIX new lines
                data = data.replace(/\r\n/g, "\n");
                //replace MAC new lines
                data = data.replace(/\r/g, "\n");
                //split into rows
                var rows = data.split("\n");
                //log( rows.length );

                var sat   = '';
                var nchan = 0;
                var ncyc  = 0;

                /*
                 *  File line 0 contains the satname, number of channels, and number of cycles
                 */
                if (rows[0]) {
                    var column = rows[0].split(",");
                    sat    = column[0];
                    nchan  = parseInt(column[1]);
                    ncyc   = parseInt(column[2]);
                }

                /*
                 * File lines 1..nchanl contain the individual channel meta data including:
                 *          - actual channel number (some instrument channels are non-contiguously numbered)
                 *          - use flag (1 is assimilated, -1 is not)
                 *          - 10 chi values (ges regions 1-5, anl regions 1-5)
                 *          - wavelength
                 *          - frequency
                 */
                for (var i = 1; i <= nchan; i++){
                    // this line helps to skip empty rows
                    if (rows[i]) {
                        // our columns are separated by comma
                        var column = rows[i].split(",");

                        // data element order is channel, use flag, 10 chi values, wavelength, freq
                        var chan    = Number(column[0]);
                        var use     = Number(column[1]);
                        var chi     = [];
                        chi.push(Number(column[2]));    chi.push(Number(column[3]));    chi.push(Number(column[4]));
                        chi.push(Number(column[5]));    chi.push(Number(column[6]));    chi.push(Number(column[7]));
                        chi.push(Number(column[8]));    chi.push(Number(column[9]));    chi.push(Number(column[10]));
                        chi.push(Number(column[11]));
                        var wvlnth  = Number(column[12]);
                        var freq    = Number(column[13]);

                        // put sat, nchan, and ncyc in each channel object so that we can later use curChan as index
                        // rather than curchan -1
                        var dataObject = {sat:sat, nchan:nchan, ncyc:ncyc, chan:chan, use:use,
                            chi:chi, wvlnth:wvlnth, freq:freq};

                        // add object to dataProvider array
                        chanData.push(dataObject);
                    }
                }

                log( '<-- parseChanData' );
            }

            /* ------------------------------------------------------------
             * fillChanData
             *    Take the data from the chanData structure, load it into
             *    the channel menu in the UI and set the current selection.
             * ------------------------------------------------------------ */
            function fillChanData( ){
                log( '--> fillChanData, targetChan = ' + targetChan);

                var nchan = chanData[0].nchan;

                var targetChanFound = false;
                for (var ii = 0; ii < nchan; ii++) {                // this loop loads the channel list
                    var option = document.createElement("option");
                    option.text = chanData[ii].chan;
                    chanSel.add(option);
                    if ( option.text === targetChan ) {
                        curChan = ii;
                        targetChanFound = true;
                    }
                }

                if( !targetChanFound ){
                    var logMsg = " Requested channel " + targetChan + " not found, using default value";
                    log( logMsg );
                    curChan = 0;
                }

                chanSel.selectedIndex = curChan;                    // set the requested chan or 0 (default)
                log( '<-- fillChanData');
            }

            /* -----------------------------------------------------------------------------------
             * loadData loads data from comma separated value file for a given instrument/channel
             * ----------------------------------------------------------------------------------- */
            function loadData( file ) {
                log( '--> loadData ' + file);
                if (window.XMLHttpRequest) {
                    // IE7+, Firefox, Chrome, Opera, Safari
                    var request = new XMLHttpRequest();
                }
                else {
                    // code for IE6, IE5
                    var request = new ActiveXObject('Microsoft.XMLHTTP');
                }

                //
                // See note in loadChanData about the use of request object.  
                // The same thing is at work here.
                //
                request.open('GET', file, true);
                request.onload = function(e) {
                    if( request.status === 200 && request.readyState === 4 ) {
                        log( 'load completed');

                        // see parseData for full explanation of 2nd param
                        parseData( request.responseText, 0);
                        fillCharts();

                        // If a additional data files are desired for comparison purposes they could
                        //   be loaded here.  Maybe the calling routine is a better place though?
                        //var dataFile = './pngs/time/' + curSrcName + '.' + curChan + '.time.txt';
                    }
                    else {
                        log (" Failed to load " + file + " ; request.status = " + request.status );
                    }
                }
                request.send();

                log( '<-- loadData' );
            }

            /* --------------------------------------------------------------------------------------
             *  parseData
             *      Parse data received from the file and load it into the chartData structure.
             *      Note:  The idx was used in the prototype to allow for 2 data files being loaded
             *             for comparison purposes.  I've left the idx param in to facilitate adding
             *             that functionality in the future.
             * -------------------------------------------------------------------------------------- */
            function parseData(data, idx) {
                log( '--> parseData ,idx = ' + idx);
                //replace UNIX new lines
                data = data.replace(/\r\n/g, "\n");
                //replace MAC new lines
                data = data.replace(/\r/g, "\n");
                //split into rows
                var rows = data.split("\n");
                log( 'rows.length = ' + rows.length );

                // Note that chanData[0].ncyc (number of cycles) may not square with the number of cycles
                // here -- because the chanData is from the time files and we're working with bcoef files.
                // Most of the time they should be the same, but just to make sure we don't do anything
                // regretabble we'll use the rows.length-1 which will be the bcoef number of cycles.
                var ncyc  = chanData[0].ncyc = rows.length-1;
                log( 'ncyc = ' + ncyc );

                //------------------------------------------------------------
                // load null values into the chartData array for each channel
                //------------------------------------------------------------
                for( var ii=0; ii < chanData[0].nchan; ii++ ) {
                    chartData[ii] = new Array(2);
                    chartData[ii][0] = null;
                    chartData[ii][1] = null;
                }

                //------------------------------------------------------------------------------
                // Load count data for each channel using arrays for the time and gr/ar values.
                //------------------------------------------------------------------------------
                var time        = [];
                var g_mean      = [];   var a_mean      = [];
                var g_atmpath   = [];   var a_atmpath   = [];
                var g_clw       = [];   var a_clw       = [];
                var g_lapse2    = [];   var a_lapse2    = [];
                var g_lapse     = [];   var a_lapse     = [];
                var g_cos_ssmis = [];   var a_cos_ssmis = [];
                var g_sin_ssmis = [];   var a_sin_ssmis = [];
                var g_emiss     = [];   var a_emiss     = [];
                var g_ordang4   = [];   var a_ordang4   = [];
                var g_ordang3   = [];   var a_ordang3   = [];
                var g_ordang2   = [];   var a_ordang2   = [];
                var g_ordang1   = [];   var a_ordang1   = [];


                for( var i = 0; i < rows.length-1; i++ ){

                    // this if statement helps to skip empty rows
                    if (rows[i]) {
                        var column = rows[i].split(",");

                        time.push(column[1]);

                        g_mean.push(Number(column[2]));         a_mean.push(Number(column[3]));
                        g_atmpath.push(Number(column[4]));      a_atmpath.push(Number(column[5]));
                        g_clw.push(Number(column[6]));          a_clw.push(Number(column[7]));
                        g_lapse2.push(Number(column[8]));       a_lapse2.push(Number(column[9]));
                        g_lapse.push(Number(column[10]));       a_lapse.push(Number(column[11]));
                        g_cos_ssmis.push(Number(column[12]));   a_cos_ssmis.push(Number(column[13]));
                        g_sin_ssmis.push(Number(column[14]));   a_sin_ssmis.push(Number(column[15]));
                        g_emiss.push(Number(column[16]));       a_emiss.push(Number(column[17]));
                        g_ordang4.push(Number(column[18]));     a_ordang4.push(Number(column[19]));
                        g_ordang3.push(Number(column[20]));     a_ordang3.push(Number(column[21]));
                        g_ordang2.push(Number(column[22]));     a_ordang2.push(Number(column[23]));
                        g_ordang1.push(Number(column[24]));     a_ordang1.push(Number(column[25]));

                    }
                }

                var chanObj = { time: time,
                    g_mean: g_mean,             a_mean: a_mean,
                    g_atmpath: g_atmpath,       a_atmpath: a_atmpath,
                    g_clw: g_clw,               a_clw: a_clw,
                    g_lapse2: g_lapse2,         a_lapse2: a_lapse2,
                    g_lapse: g_lapse,           a_lapse: a_lapse,
                    g_cos_ssmis: g_cos_ssmis,   a_cos_ssmis: a_cos_ssmis,
                    g_sin_ssmis: g_sin_ssmis,   a_sin_ssmis: a_sin_ssmis,
                    g_emiss: g_emiss,           a_emiss: a_emiss,
                    g_ordang4: g_ordang4,       a_ordang4: a_ordang4,
                    g_ordang3: g_ordang3,       a_ordang3: a_ordang3,
                    g_ordang2: g_ordang2,       a_ordang2: a_ordang2,
                    g_ordang1: g_ordang1,       a_ordang1: a_ordang1
                };

                if( idx === 1 || idx === 0 ) {
                    chartData[curChan][idx] = chanObj;
                }

                log( '<-- parseData ');
            }


            /* ----------------------------------------------------------------------
             *  fillCharts
             *      load data from the chartData structure to the chart structure(s)
             * ---------------------------------------------------------------------- */
            function fillCharts(){
                log( '--> fillCharts');

                // ---------------------------------------------------------------
                //   Define data1, the container for chart1's information.
                //      Note:  In the Haixia's prototype I added hard-wired
                //              ctl_ges items in order to show comparison plots.
                // ---------------------------------------------------------------
                data1 = new google.visualization.DataTable();

                data1.addColumn('date', 'time');
                data1.addColumn('number', 'ges, mean');         data1.addColumn('number', 'anl, mean');

                data1.addColumn('number', 'ges, atmpath');      data1.addColumn('number', 'anl, atmpath');
                data1.addColumn('number', 'ges, clw');          data1.addColumn('number', 'anl, clw');
                data1.addColumn('number', 'ges, lapse2');       data1.addColumn('number', 'anl, lapse2');
                data1.addColumn('number', 'ges, lapse');        data1.addColumn('number', 'anl, lapse'); 
                data1.addColumn('number', 'ges, cos_ssmis');    data1.addColumn('number', 'anl, cos_ssmis');
                data1.addColumn('number', 'ges, sin_ssmis');    data1.addColumn('number', 'anl, sin_ssmis');
                data1.addColumn('number', 'ges, emiss');        data1.addColumn('number', 'anl, emiss');
                data1.addColumn('number', 'ges, ordang4');      data1.addColumn('number', 'anl, ordang4');
                data1.addColumn('number', 'ges, ordang3');      data1.addColumn('number', 'anl, ordang3');
                data1.addColumn('number', 'ges, ordang2');      data1.addColumn('number', 'anl, ordang2');
                data1.addColumn('number', 'ges, ordang1');      data1.addColumn('number', 'anl, ordang1'); 

                var idx = curChan;
                 //log( 'curChan:'); log( curChan );
                 //log( 'curStat:'); log( curStat );
                var ncyc = chanData[0].ncyc;
                 //log( 'ncyc:'); log( ncyc );


                var chartTitle1;
                var chartTitle2;
                var logScale = "true";
                var vAxisFormat = '0.##E+0';

                // --------------------------------------
                //   load data1 object to make the chart
                // --------------------------------------

                for (var ii = 0; ii < ncyc; ii++) {
                   var yr = chartData[idx][0].time[ii].substr(0, 4);
                   var mm = Number(chartData[idx][0].time[ii].substr(4, 2)) - 1;  // stupidity!  mm is range 0-11, not 1-12 according to some idiot at google
                   var dd = chartData[idx][0].time[ii].substr(6, 2);
                   var hh = chartData[idx][0].time[ii].substr(8, 2);

                   data1.addRows([
                       [new Date(yr, mm, dd, hh),
                           Number(chartData[idx][0].g_mean[ii]),           Number(chartData[idx][0].a_mean[ii]),
                           Number(chartData[idx][0].g_atmpath[ii]),        Number(chartData[idx][0].a_atmpath[ii]),
                           Number(chartData[idx][0].g_clw[ii]),            Number(chartData[idx][0].a_clw[ii]),   
                           Number(chartData[idx][0].g_lapse2[ii]),         Number(chartData[idx][0].a_lapse2[ii]),   
                           Number(chartData[idx][0].g_lapse[ii]),          Number(chartData[idx][0].a_lapse[ii]), 
                           Number(chartData[idx][0].g_cos_ssmis[ii]),      Number(chartData[idx][0].a_cos_ssmis[ii]),
                           Number(chartData[idx][0].g_sin_ssmis[ii]),      Number(chartData[idx][0].a_sin_ssmis[ii]),
                           Number(chartData[idx][0].g_emiss[ii]),          Number(chartData[idx][0].a_emiss[ii]),
                           Number(chartData[idx][0].g_ordang4[ii]),        Number(chartData[idx][0].a_ordang4[ii]),
                           Number(chartData[idx][0].g_ordang3[ii]),        Number(chartData[idx][0].a_ordang3[ii]),
                           Number(chartData[idx][0].g_ordang2[ii]),        Number(chartData[idx][0].a_ordang2[ii]),
                           Number(chartData[idx][0].g_ordang1[ii]),        Number(chartData[idx][0].a_ordang1[ii])
                       ]
                   ]);
                }


		// Determine chartTitle1
		// Any reason I couldn't use the actual value of the Statistic selection
		// for this?
                var line2 = curSrcName + ", " + chartData[idx][0].time[0];
                log( "line2 = " + line2 );

                if( curStat === 0 ) {
                    chartTitle1 = "Mean Term\n" + line2;
                } else if( curStat === 1 ) {
                    chartTitle1 = "Scan Angle\n" + line2;
                } else if( curStat === 2 ) {
                    chartTitle1 = "Lapse Rate\n" + line2;
                } else if( curStat === 3 ) {
                    chartTitle1 = "(Lapse Rate)**2\n" + line2;
                } else if( curStat === 4 ) {
                    chartTitle1 = "Cloud Liquid Water\n" + line2;
                } else if( curStat === 5 ) {
                    chartTitle1 = "Cos SSMIS\n" + line2;
                } else if( curStat === 6 ) {
                    chartTitle1 = "Sin SSMIS\n" + line2;
                } else if( curStat === 7 ) {
                    chartTitle1 = "Emissivity\n" + line2;
                } else if( curStat === 8 ) {
                    chartTitle1 = "1st Order Angle\n" + line2;
                } else if( curStat === 9 ) {
                    chartTitle1 = "2nd Order Angle\n" + line2;
                } else if( curStat === 10 ) {
                    chartTitle1 = "3rd Order Angle\n" + line2;
                } else if( curStat === 11 ) {
                    chartTitle1 = "4th Order Angle\n" + line2;
                }

               
                // formatter1 modifies format of date to be YYYYMMDDHH
                var formatter1 = new google.visualization.DateFormat({pattern: "yyyyMMddHH"});
                formatter1.format(data1, 0);

                var options1 = {
                    title: chartTitle1,
                    titleTextStyle:{ fontSize: 20 },
                    vAxis:{ format          : '0.##E+0'},
                    hAxis:{ title           : 'Cycle Time',
                        showTextEvery       :  1 },
                    explorer: {
                        actions: ['dragToZoom', 'rightClickToReset'],
                        axis: 'horizontal',
                        keepInBounds: true}
                };

                var chart1 = new google.visualization.LineChart(document.getElementById('plot1'));

                // add callback for mouse events
                //google.visualization.events.addListener(chart1, 'select', selectHandler);

                //-------------------------------------------------------------------
                // Create a view for the display of only selected values for chart1.
                //-------------------------------------------------------------------
                var myView1 = new google.visualization.DataView( data1 );

                google.visualization.events.addListener(chart1, 'ready', function () {
                    var printDiv = document.getElementById( "png1" );
                    chart1.innerHTML = '<img src="' + chart1.getImageURI() + '">';
                    //log( "innerHTML = " + chart1.innerHTML );
                    printDiv.outerHTML = '<a id="png1" class="link1" href="' + chart1.getImageURI() + '">Printable version </a>';
                });


                // turn on/off viewed data according to current checkbox configuration
                var CkBxGes = document.getElementById( "ckboxGes"    ).checked;
                var CkBxAnl = document.getElementById( "ckboxAnl"    ).checked;


                if (!CkBxGes) {
                    myView1.hideColumns( [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23] );
                    log( '!ges, Hiding 1,3,5,7,9,11,13,15,17,19,21,23');
                } 
                if (!CkBxAnl) {
                    myView1.hideColumns( [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24] );
                    log( '!anl, Hiding 2,4,6,8,10,12,14,16,18,20,22,24');
                }

                if( curStat === 0 ) {		// mean, columns 1 & 2
                    myView1.hideColumns( [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                          16, 17, 18, 19, 20, 21, 22, 23, 24]);
                    log( 'curStat is mean, showing 1,2');
                }else if( curStat === 1 ){	// scan angle, columns 3 & 4
                    myView1.hideColumns( [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                          16, 17, 18, 19, 20, 21, 22, 23, 24]);
                    log( 'curStat is scan angle, showing 3,4');
                }else if( curStat === 2 ){	//lapse rate, columns 9 & 10
                    myView1.hideColumns( [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15,
                                          16, 17, 18, 19, 20, 21, 22, 23, 24]);
                    log( 'curStat is lapse, showing 9,10');
                }else if( curStat === 3 ){	//lapse2, columns 7 & 8
                    myView1.hideColumns( [1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15,
                                          16, 17, 18, 19, 20, 21, 22, 23, 24]);
                    log( 'curStat is lapse2, showing 7,8 ');
                }else if( curStat === 4 ){	//clw, columns 5 & 6
                    myView1.hideColumns( [1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                          16, 17, 18, 19, 20, 21, 22, 23, 24]);
                    log( 'curStat is clw, showing 5,6 ');
                }else if( curStat === 5 ){	//cos_ssmis, columns 11 & 12 
                    myView1.hideColumns( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15,
                                          16, 17, 18, 19, 20, 21, 22, 23, 24]);
                    log( 'curStat is cos_ssmis, showing 11,12 ');
                }else if( curStat === 6 ){	//sin_ssmis, columns 13 & 14 
                    myView1.hideColumns( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15,
                                          16, 17, 18, 19, 20, 21, 22, 23, 24]);
                    log( 'curStat is sin_ssmis, showing 13,14 ');
                }else if( curStat === 7 ){	//emiss, columns 15 & 16 
                    myView1.hideColumns( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
                                          14, 17, 18, 19, 20, 21, 22, 23, 24]);
                    log( 'curStat is emiss, showing 15,16 ');
                }else if( curStat === 8 ){	//ordang1, columns 23 & 24 
                    myView1.hideColumns( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
                                          14, 15, 16, 17, 18, 19, 20, 21, 22]);
                    log( 'curStat is ordang1, showing 23,24 ');
                }else if( curStat === 9 ){	//ordang2, columns 21 & 22 
                    myView1.hideColumns( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
                                          14, 15, 16, 17, 18, 19, 20, 23, 24]);
                    log( 'curStat is ordang2, showing 21,22 ');
                }else if( curStat === 10 ){	//ordang3, columns 19 & 20 
                    myView1.hideColumns( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
                                          14, 15, 16, 17, 18, 21, 22, 23, 24]);
                    log( 'curStat is ordang3, showing 19,20 ');
                }else if( curStat === 11 ){	//ordang4, columns 17 & 18 
                    myView1.hideColumns( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
                                          14, 15, 16, 19, 20, 21, 22, 23, 24]);
                    log( 'curStat is ordang4, showing 17,18 ');
                }



                // ------------------
                // display the chart
                // ------------------
                chart1.draw(myView1, options1);

                //---------------------------------------
                // update the channel specific labels
                //---------------------------------------
                var chanLab = document.getElementById("chanLabel");
                var newLab =  "Channel " + chanData[curChan].chan + "<p>";
                chanLab.innerHTML = newLab;

                var freqLab = document.getElementById("freqLabel");
                var newLab = "f " + chanData[curChan].freq + " GHZ";
                freqLab.innerHTML = newLab;

                var waveLab = document.getElementById("waveLabel");
                var newLab = "&lambda; " + chanData[curChan].wvlnth + " &mu;m";
                waveLab.innerHTML = newLab;

                //------------------------------------------------------------------------------------
                // Determine if chi value can be displayed and if avg & sdv calculation can be done.
                // This can only be done if a single data source is displayed (when numColumns == 2).
                // If numColumns != 2 then hide avg, sdv, and chi from view.
                //------------------------------------------------------------------------------------
                var avgLabel = document.getElementById("avgLabel");
                var sdvLabel = document.getElementById("sdvLabel");
                var chiLabel = document.getElementById("chiLabel");
                var numColumns = myView1.getNumberOfColumns();

                if( numColumns == 2 ){
                    var dataPts1 = [];

                    // determine new chi value by finding the ges/anl setting and the displayed region
                    var region = 0;

                    var newLab = "&chi;  " + chanData[curChan].chi[region];
                    chiLabel.innerHTML = newLab;
                    chiLabel.style.display = "block";

                    // -----------------------------------------------------------------------------------
                    // calculate avg and sdv values (uses the stats.js package (handle is "st" below)
                    // ------------------------------------------------------------------------------------
                    for (var ii = 0; ii < ncyc; ii++) {
                        dataPts1.push(myView1.getValue(ii, 1));
                    }
                    var avg = st.getAverageFromNumArr( dataPts1, 2 );
                    var sdv = st.getStandardDeviation( dataPts1, 2 );


                    var newLab = "avg:  " + avg;
                    avgLabel.innerHTML = newLab;
                    avgLabel.style.display = "block";

                    var newLab = "sdv:  " + sdv;
                    sdvLabel.innerHTML = newLab;
                    sdvLabel.style.display = "block";

                } else {
                    avgLabel.style.display = "none";
                    sdvLabel.style.display = "none";
                    chiLabel.style.display = "none";
                }

                // ----------------------------------------------------
                //  turn on/off the non-assimilated channel message if
                //  use flag is 1 (assim) or 0 (non-assim)
                // ----------------------------------------------------
                var chanAssimLbl = document.getElementById("chanAssimLabel");
                var isNotLbl     = document.getElementById("isNotLabel");
                var assimLbl     = document.getElementById("assimLabel");

                if( chanData[curChan].use === 1) {
                    chanAssimLbl.style.display  = "none";
                    isNotLbl.style.display      = "none";
                    assimLbl.style.display      = "none";
                }else {
                    chanAssimLbl.innerHTML      = '<p style="color:green">' + "Channel " + chanData[curChan].chan + "<p>";
                    chanAssimLbl.style.display  = "inLine";
                    isNotLbl.style.display      = "inline";
                    assimLbl.style.display      = "inLine";
                }

                //--------------------------------------------------------------------
                // Modify the page title and valid time labels for the data selection
                //--------------------------------------------------------------------
                var titleLbl       = document.getElementById("title");
                var newTitle       = curSrcName.toUpperCase() + ", Bias Correction Coefficient Plot";
                titleLbl.innerHTML = newTitle;

                var validLbl       = document.getElementById("valid");
                var newValid       = "Valid " + chartData[idx][0].time[0];  // use chartData not myView1 so times aren't formatted
                validLbl.innerHTML = newValid;


                //------------------------------------------------------------------------------------
                //  store current menu selections in parent.window.value so the current data
                //  selections can be continued after switching plot types (time/angle/summary/bcoef)
                //------------------------------------------------------------------------------------
                var chanSel = document.getElementById("chanSelect");
                var chanName = chanSel.options[curChan].value;

                //var platformSel  = document.getElementById("platformSelect");
                //curSrc = platformSel.options[platformSel.selectedIndex].text;

                var statSel = document.getElementById("statSelect");
                curStat = statSel.selectedIndex;
                curStatName = statSel.options[curStat].value;

                var curSelStr = '?sat=' + curSrcName + '&channel=' + chanName + '&stat=' + curStatName;
                log( 'setting curSelStr = ' + curSelStr );
                parent.window.value = curSelStr;


                log( '<-- fillCharts');
            }


            /*------------------------------
             * -----------------------------
             *
             *  drawCharts code starts here
             *
             * -----------------------------
             * -----------------------------*/


            // targetSrc is the input src (source) value for the User Interface (re)load.
            var targetSrc;

            //
            //  On initial load pull any encoded values from the url line for src, stat, and/or channel
            //   and load into target[Src|Stat|Chan].
            //  If other than initial load, then we're reloading based on user action.  So load the
            //   target[Src|Stat|Chan] values using the current UI settings
            //
            if( initialLoad ) {
                log('initial Load is true ');

                // Determine if the src, stat and/or chan were set via the input html stream.
                // These should all be human readable inputs (src, stat, chan);
                //      - Sanitize any data in them
                //      - Translate inputs into interface values
                //      - Anything unspecified defaults to the first in the list (airs_aqua, cnt, 1)

                //var dataSrc = curDataSrc;
                var src = new Uri(url).getQueryParamValue('sat');
                var stat = new Uri(url).getQueryParamValue('stat');  // this is cnt, pen, omgnbc, biascr, omgbc
                var chan = new Uri(url).getQueryParamValue('channel');  // this is actual channel#, not sequential#


                // --------------------------------------------------------------------------------
                // Attempt to match input src to an existing string in the platformSel list.
                // No input value or no match to the list defaults to the first item in the list.
                // --------------------------------------------------------------------------------
                log( 'src = ' + src );

                if( src ) {
                    var numPlatSel = platformSel.length;
                    var srcFound = false;

                    log( 'numPlatSel = ' + numPlatSel );
                    for (var i = 0; i < numPlatSel; ++i) {
                        log( 'platformSel.options[i].value = ' + platformSel.options[i].value );
                        if( platformSel.options[i].value === src ) {
                            platformSel.selectedIndex = i;
                            curSrc = 0;
                            curSrcName = src;
                            targetSrc = src;
                            srcFound = true;
                        }
                    }
                    if( !srcFound ){
                        var logMsg = 'Unable to match input src: ' + src + ' to any existing source, using Default';
                        log( logMsg );
                        src = null;
                    }
                }

                log( 'targetSrc = ' + targetSrc );
                if ( !src ) {
                    curSrc = 0;
                    curSrcName = platformSel.options[curSrc].value;
                    src = curSrcName;
                    targetSrc = src;
                }


                // -------------------------------------------------------------------------------
                // Stat value is matched to one of the 12 stat types.  No value input or no match
                // defaults to the first stat type (mean).
                // -------------------------------------------------------------------------------
                curStat = 0;					// default value

                if ( stat ) {
                    var numStatSel = statSel.length;
                    var statFound = false;

                    for( var i=0; i < numStatSel; ++i ){
                       if( statSel.options[i].value === stat ){
                          curStat = i;
                          statFound = true;
                          break;
                       }
                    }

                    if( !statFound ){
                       var logMsg = 'Unable to match input stat: ' + stat + ' to any existing statistic, using Default';
                       log( logMsg );
                    }
                }

                statSel.selectedIndex = curStat;



                // ------------------------------------------------------------
                // Chan is validated by ensuring it's a positive integer.
                // If no value or an incorrect one it defaults to 0.
                // ------------------------------------------------------------
                if( ! chan ){
                    log( 'NO chan specified; curChan set to 0');
                    chan = 0;
                }
                if ( ! isInt( chan ) ) {
                    var logMsg = "Input chan value " + chan + ' is not an integer value, using Default instead';
                    log( logMsg );
                    chan = 0;
                }
                targetChan = chan;  // value unavailable until chanData is loaded


                // ------------------------------
                // End of initial load condition
                // ------------------------------
                initialLoad = false;

            } else {
                // --------------------------------------------------------------
                //  Not initial load, use the UI settings to set curSrc, curStat
                // --------------------------------------------------------------
                targetSrc  = platformSel.options[platformSel.selectedIndex].value;

                curSrcName = targetSrc;
                curSrc     = platformSel.selectedIndex;
                curStat    = statSel.selectedIndex;
            }

            // -----------------------------------------------------------------------
            //  set the platform menu to targetSrc or set to 0 if targetSrc not found
            // -----------------------------------------------------------------------
//            var foundSrc = false;
//            for (var i = 0; i < platformSel.options.length; i++) {
//                if ( platformSel.options[i].value === targetSrc ) {
//                    platformSel.selectedIndex = i;
//                    curSrc = i;
//                    curSrcName = targetSrc;
//                    foundSrc = true;
//                    break;
//                }
//            }
//            if( !foundSrc ){
//                var errorMsg = 'requested source ' + targetSrc + ' NOT found';
//                log( errorMsg );
//                platformSel.selectedIndex = 0;
//                curSrc = 0;
//                curSrcName = platformSel.options[curSrc].value;
//            }


            // ------------------------------------------------------------------------
            //  reload the channel data if we've changed src or are on an initial load
            // ------------------------------------------------------------------------
            if( chanData.length <= 0 ) {
                chanSel.selectedIndex = curChan;
                var chanFile = './pngs/time/' + curSrcName + '.chan.txt';
                loadChanData(chanFile);
            }
            else {
                // -----------------------------------------------------------------
                // reload the data if needed, else just fill and display the charts
                //------------------------------------------------------------------
                curChan = chanSel.selectedIndex;
                //var chanName = chanSel.options[curChan].value;
                //curStat = statSel.selectedIndex;
                //curStatName = statSel.options[curStat].value;
                var platformSel  = document.getElementById("platformSelect");
                curSrcName = platformSel.options[platformSel.selectedIndex].value;

                if( ! chartData[curChan][0] ) {
                    var dataFile = './pngs/bcoef/' + curSrcName + '.' + curChan + '.bcoef.txt';
                    loadData(dataFile);
                } else {
                    fillCharts();
                }
            }

            log ( "<-- drawCharts");

        }   /* end drawCharts */



        // selectList : Set an option list to the selected number (i) if it isn't already
        //              selected.  )Setting an already selected item to selected on some browsers
        //              causes the whole list to flash.)
        function selectList(list, i) {
            if (list.selectedIndex != i) list.selectedIndex = i;
        }


        //  boxCheck :  callback for any change in checkboxes
        function boxCheck(value) {
            //
            // draw or redraw the chart
            //
            drawCharts();
        }

        // channelSelect :  callback for a change in selected channel
        function channelSelect(value){
            //
            // redraw chart using selected channel
            //
            var chanSel = document.getElementById("chanSelect");
            curChan     = chanSel.selectedIndex;
            drawCharts();
        }


        // statisticSelect :    callback for a change in selected stat type
        function statisticSelect( value ){
            //
            // redraw chart using selected stat type
            //
            drawCharts();
        }

        // dataSetSelect :  callback for change in data set (used with comparison plots)
        function dataSetSelect( value ){
           log( '-->  dataSetSelect');
           log( '<--  dataSetSelect');
        }


        // platSelect :  callback for change in select sat/instrument
        function platSelect( value ) {
            //
            // dump all data and reload
            // attempt to reload curChan if that matches a value in the
            // new channel array, otherwise, start at 0.
            //

            // remove all previous channel numbers
            var chanSel = document.getElementById("chanSelect");
            while (chanSel.firstChild)
                chanSel.removeChild(chanSel.firstChild);

            // reset channel and chart data structures, reset curChan
            chanData = [];
            chartData  = [[]];
            curChan  = 0;

            drawCharts();
        }


        //  log :   debug tool, this sends output msg to web console (in a browser) as an error
        function log(msg) {
            setTimeout(function() {
                throw new Error(msg);
            }, 0);
        }

        // isInt :  determine if input value is an integer, returning True or False
        function isInt(value) {
            return !isNaN(value) &&
                    parseInt(Number(value)) == value &&
                    !isNaN(parseInt(value, 10));
        }


    </SCRIPT>

    <style>
        .link1{
            position: relative;
            left: 310px;
            top:  365px;
        }
    </style>
</HEAD>


<BODY>

<h2 id="title" align='center'>Bias Correction Coefficient Plot </h2>
<h3 id="valid" align="center">Valid</h3>

<label id="source" style="position: absolute; left: 2px; top:12px"><b> Source:</b></label>
<label id="suffix" value="INSERT_SUFFIX" style="position: absolute; left: 72px; top:12px; color: blue"><b>INSERT_SUFFIX</b></label>

<div id="plot1" style="width: 1000px; height: 400px; float:right"></div>
<div id="png1" class="link1"></div>

<form id="satSelectForm" action="" style="position:absolute; left:2px;top:40px">
    <b>Platform:</b>
    <select id="platformSelect" onChange="platSelect(this.value)">
        <!-- This menu will need to be customized by Install_html.sh on wcoss
             It could be loaded using a php file, but that risks a condition where
             a source might be missing for some reason, and we should know about that
             if it was to happen, so it's better that a data load would fail here.  -->
        <!-- INSERT_TABLE -->
<OPTION value="airs_aqua" id="airs_aqua"> AQUA AIRS </OPTION>
<OPTION value="amsua_aqua" id="amsua_aqua"> AQUA AMSU-A </OPTION>
<OPTION value="sndrd1_g15" id="sndrd1_g15"> GOES-15 SNDRD1 </OPTION>
<OPTION value="sndrd2_g15" id="sndrd2_g15"> GOES-15 SNDRD2 </OPTION>
<OPTION value="sndrd3_g15" id="sndrd3_g15"> GOES-15 SNDRD3 </OPTION>
<OPTION value="sndrd4_g15" id="sndrd4_g15"> GOES-15 SNDRD4 </OPTION>
<OPTION value="seviri_m10" id="seviri_m10"> M10 SEVIRI </OPTION>
<OPTION value="amsua_metop-a" id="amsua_metop-a"> METOP-A AMSU-A </OPTION>
<OPTION value="amsua_metop-b" id="amsua_metop-b"> METOP-B AMSU-A </OPTION>
<OPTION value="hirs4_metop-a" id="hirs4_metop-a"> METOP-A HIRS/4 </OPTION>
<OPTION value="hirs4_metop-b" id="hirs4_metop-b"> METOP-B HIRS/4 </OPTION>
<OPTION value="iasi_metop-a" id="iasi_metop-a"> METOP-A IASI </OPTION>
<OPTION value="iasi_metop-b" id="iasi_metop-b"> METOP-B IASI </OPTION>
<OPTION value="mhs_metop-a" id="mhs_metop-a"> METOP-A MHS </OPTION>
<OPTION value="mhs_metop-b" id="mhs_metop-b"> METOP-B MHS </OPTION>
<OPTION value="amsua_n15" id="amsua_n15"> NOAA-15 AMSU-A </OPTION>
<OPTION value="amsua_n18" id="amsua_n18"> NOAA-18 AMSU-A </OPTION>
<OPTION value="amsua_n19" id="amsua_n19"> NOAA-19 AMSU-A </OPTION>
<OPTION value="hirs4_n19" id="hirs4_n19"> NOAA-19 HIRS/4 </OPTION>
<OPTION value="mhs_n19" id="mhs_n19"> NOAA-19 MHS </OPTION>
<OPTION value="atms_npp" id="atms_npp"> NPP ATMS </OPTION>
<OPTION value="cris_npp" id="cris_npp"> NPP CRIS </OPTION>
        <!-- END_TABLE_INSERT -->
    </select>
</form>

<form id="statSelectForm" action="" style="position:absolute; left:2px;top:70px">
    <b>Statistic</b>
    <select id="statSelect" onchange="statisticSelect(this.value)">
        <option value="mean">Mean</option>
        <option value="atmpath">Scan angle</option>
        <option value="lapse">Lapse rate</option>
        <option value="lapse2">(Lapse rate)**2</option>
        <option value="clw">Cloud liquid water</option>
        <option value="cos_ssmis">Cos for SSMIS</option> 
        <option value="sin_ssmis">Sin for SSMIS</option>
        <option value="emiss"> Emissivity sensitivity</option>
        <option value="ordang1">1st order angle</option>
        <option value="ordang2">2nd order angle</option>
        <option value="ordang3">3rd order angle</option>
        <option value="ordang4">4th order angle</option>
    </select>
</form>

<!-- The channel menu is loaded dynamically according to the selected sat/instrument. -->
<form id="chanSelectForm" action="" style="position:absolute;left:2px;top:100px">
    <b>Channel:</b>
    <select id="chanSelect" onChange="channelSelect(this.value)">
    </select>
</form>

<!--
   This is the prototype solution (crude hack) for presenting mutiple data sets to the user.
   In this case Haixia needed to compare data from set ccr2 and Ctl.  Ideally this menu would be loaded dynamically
   based on the sets located in parallel to the current one on the user's web server directory.

  <table style="position:absolute;left:2px;top:140px;width:150px">
    <caption style="text-indent:2em"><b>Data Sources:</b></caption>
    <tr><td>
        <input type="checkbox" id="ckboxCcr2" name="checkbox" value="ccr2" checked onclick="boxCheck(this.value)">ccr2</input>
    </td></tr>
    <tr><td>
        <input type="checkbox" id="ckboxCtl"  name="checkbox" value="Ctl" onclick="boxCheck(this.value)" >Ctl</input>
    </td></tr>
</table> -->


<table style="position:absolute;left:2px;top:210px;width:150px">
    <caption style="text-indent:2em"><b>Data Sets:</b> </caption>
    <tr><td>
        <input type="checkbox" id="ckboxGes" name="checkbox" value="gesdata" checked onclick="boxCheck(this.value)">ges data</input>
    </td></tr>
    <tr><td>
        <input type="checkbox" id="ckboxAnl" name="checkbox" value="anldata" onclick="boxCheck(this.value)">anl data</input>
    </td></tr>
</table>


<label id="chanLabel" style="position:absolute;left:165px;top:200px">
    <i>Channel numb</i>
</label>
<label id="chiLabel" style="position:absolute;left:165px;top:220px">
    <i> &chi; </i>
</label>
<label id="freqLabel" style="position:absolute;left:165px;top:240px">
    <i>f GHZ</i>
</label>
<label id="waveLabel" style="position:absolute;left:165px;top:260px">
    <i> &lambda; &mu;m:</i>
</label>
<label id="avgLabel" style="position:absolute;left:165px;top:280px">
    <i> avg: </i>
</label>
<label id="sdvLabel" style="position:absolute;left:165px;top:300px">
    <i> sdv: </i>
</label>
<label id="chanAssimLabel" style="position:absolute;left:165px;top:320px">
    <i> non-assimilated channel number (green) </i>
</label>
<label id="isNotLabel" style="position:absolute;left:165px;top:352px;color:#ff1eaf">
    <i> *** is NOT *** </i>
</label>
<label id="assimLabel" style="position:absolute;left:165px;top:366px;color:green">
    <i> assimilated</i>
</label>



</BODY></HTML>
