#!/bin/ksh

set -xu

# $PREP_SMOKE_DEBUG
#   YES = bypass error recovery code and abort if anything ever fails
#   NO = use error recovery code instead
PREP_SMOKE_DEBUG=NO  # MUST be "NO" for actual runs

if [[ "$PREP_SMOKE_DEBUG" == "YES" ]] ; then
    set -e
fi

# Flag variables to control execution:
SENDCOM=${SENDCOM:-YES}
# need this because have toruble load module now:
#MPISER=/gpfs/hps/nco/ops/nwprod/mpiserial.v3.0.0/exec/mpiserial
export MPISER=${MPISER:-${NWROOThps}/mpiserial.${mpiserial_ver}/exec/mpiserial}

LSB_MAX_NUM_PROCESSORS="${LSB_MAX_NUM_PROCESSORS:-1}"
if (( LSB_MAX_NUM_PROCESSORS > 1 )) ; then
    # Wrapper to start prep-chem-sources.  Use aprun if this is a MAMU node:
    RUNSERIAL='aprun -d 1 -n 1 -N 1 -j 1'

    # Command to run mpiserial:
    np=$(( LSB_MAX_NUM_PROCESSORS - 1 )) # -1 for MAMU node processor
    MPISERIAL="aprun -d 1 -n $np -N 24 -j 1 $MPISER -m"
else
    fake_mpiserial() {
        chmod 755 "$1"
        set -xue
        source "$1"
    }
    RUNSERIAL=/usr/bin/time
    MPISERIAL=fake_mpiserial
fi

# Make sure we are using GMT time zone for time computations:
export TZ="GMT"

# Set up paths to shell commands
LS="${LS:-/bin/ls}"
LN="${LN:-/bin/ln}"
RM="${RM:-/bin/rm}"
MKDIR="${MKDIR:-/bin/mkdir}"
CP="${CP:-/bin/cp}"
MV="${MV:-/bin/mv}"
ECHO="${ECHO:-/bin/echo}"
CAT="${CAT:-/bin/cat}"
GREP="${GREP:-/bin/grep}"
CUT="${CUT:-/bin/cut}"
AWK="${AWK:-/bin/gawk --posix}"
SED="${SED:-/bin/sed}"
DATE="${DATE:-/bin/date}"
BC="${BC:-/usr/bin/bc}"
CHMOD="${CHMOD:-/bin/chmod}"

${ECHO} "exhrrr_prep_smoke.sh.ecf started at `${DATE}`"

########################################################################

# Date and time calculations.

START_TIME="${START_TIME:-$PDY$cyc}"

# Convert START_TIME from 'YYYYMMDDHH' format to Unix date format,
# e.g. "Fri May 6 19:50:23 GMT 2005"
if [ `${ECHO} "${START_TIME}" | ${AWK} '/^[[:digit:]]{10}$/'` ]; then
  START_TIME=`${ECHO} "${START_TIME}" | ${SED} 's/\([[:digit:]]\{2\}\)$/ \1/'`
else
  ${ECHO} "ERROR: start time, '${START_TIME}', is not in 'yyyymmddhh' or 'yyyymmdd hh' format" 1>&2
  exit 1
fi
START_JULIAN=$( date +%Y%j -d "$START_TIME" )
YYYYMMDD=`${DATE} +"%Y%m%d" -d "${START_TIME}"`
OLD_DAY=`${DATE} +"%Y%m%d" -d "${START_TIME} 1 day ago"`
OLD_JULIAN=`${DATE} +"%Y%j" -d "${START_TIME} 1 day ago"`
HH=`${DATE} +"%H" -d "${START_TIME}"`

YEAR=${YYYYMMDD:0:4}
MONTH=${YYYYMMDD:4:2}
DAY=${YYYYMMDD:6:2}
HOUR=$HH

# Paths within $DATA
workdir=${DATA}
DATAHOME_RAW="$workdir/frp_raw"
DATAHOME_PROC="$workdir/frp_proc"
DATAHOME_PREP="$workdir/preprd"

# Output directory
if [[ ! -d "$COMOUT" ]] ; then
    mkdir -p "$COMOUT"
fi

########################################################################

# FIX and DCOM data:

MCD_FILE=$FIXhrrr/smoke/MCD12_2013_NA_3km.bin
BIOME_FILE=$FIXhrrr/smoke/BIOME_NA_3km.bin

if [[ "$PREP_SMOKE_DEBUG" == "YES" ]] ; then
    test -d $DCOM_VIIRS_NPP
    test -d $DCOM_MODIS
fi

# Executables

RNPP_EXEC=$EXEChrrr/hrrr_smoke_proc_npp_frp_conus
RMODIS_EXEC=$EXEChrrr/hrrr_smoke_proc_modis_frp_conus
RNOAA20_EXEC=$EXEChrrr/hrrr_smoke_proc_j01_frp_conus
FRP_EXEC=$EXEChrrr/hrrr_smoke_merge_frp_conus
BBM_EXEC=$EXEChrrr/hrrr_smoke_fre_bbm_conus
PREP_EXEC=$EXEChrrr/hrrr_prep_chem_sources
QC_MODIS_EXEC=$EXEChrrr/hrrr_smoke_qc_modis
QC_VIIRS_EXEC=$EXEChrrr/hrrr_smoke_qc_viirs

########################################################################

# Convert obs to inputs suitable for the prep-chem-sources

$CAT<<EOC

FRP processing started at `${DATE}`

DATA = ${DATA}
DATAHOME_RAW = ${DATAHOME_RAW}
DATAHOME_PROC = ${DATAHOME_PROC}
DCOM_VIIRS_NPP = ${DCOM_VIIRS_NPP}
DCOM_VIIRS_J01 = ${DCOM_VIIRS_J01}
DCOM_MODIS = ${DCOM_MODIS}
START_TIME = ${START_TIME}
START_JULIAN = ${START_JULIAN}
MCD_FILE = ${MCD_FILE}
BIOME_FILE = ${BIOME_FILE}
RNPP_EXEC = ${RNPP_EXEC}
RMODIS_EXEC = ${RMODIS_EXEC}
RNOAA20_EXEC = ${RNOAA20_EXEC}
FRP_EXEC = ${FRP_EXEC}
BBM_EXEC = ${BBM_EXEC}

EOC

# Set up the work directory and cd into it
${MKDIR} -p ${workdir}
${RM} -rf ${DATAHOME_RAW}
${MKDIR} -p ${DATAHOME_RAW}
${RM} -rf ${DATAHOME_PROC}
${MKDIR} -p ${DATAHOME_PROC}

cd ${DATAHOME_RAW}

evening_run='00'

$CAT /dev/null > command_file

decide_dir() {
    topdir="$1"
    subdir="$1/$2"
    if [[ -d "$subdir" ]] ; then
        echo "$subdir"
    else
        echo "$topdir"
    fi
}

# Find all MODIS times and make commands to process them.  These are
# listed first in the command file because they take the longest to run.
modis_dir=$( decide_dir "$DCOM_MODIS" "$OLD_DAY/modis_fire" )
file="MODIS_C6_1_Global_MCD14DL_NRT_${OLD_JULIAN}"
if ( ls -1 "$modis_dir/$file"*.txt ) ; then
    oldfile=`ls -Art $modis_dir/${file}_*.txt | tail -n 1`
    cp $oldfile ${file}
    echo "./process_modis '$file' '${MCD_FILE}' ${HH} 24 $OLD_JULIAN > $file.log 2>&1" >> command_file
fi

if [ ${HH} -ne ${evening_run} ]; then
    modis_dir=$( decide_dir "$DCOM_MODIS" "$YYYYMMDD/modis_fire" )
    newfile="MODIS_C6_1_Global_MCD14DL_NRT_${START_JULIAN}"
    if ( ls -1 "$modis_dir/$newfile"*.txt ) ; then
        mynewfile=`ls -Art $modis_dir/${newfile}_*.txt | tail -n 1`
        cp $mynewfile ${newfile}
        echo "./process_modis '${newfile}' '${MCD_FILE}' 00 $HH $START_JULIAN > $newfile.log 2>&1" >> command_file
    fi
fi

# Find all VIIRS obs and generate commands to process each one in the command_file
for ihour in $( seq 0 23 ) ; do
    hh=$( printf %02d ihour )
    if [[ $hh -ge ${HH} ]] then
        # NPP files for this hour which are at least 120 bytes in size:
        dir=$( decide_dir "$DCOM_VIIRS_NPP" "${OLD_DAY}/af_viirs" )
        find "$dir"  -maxdepth 1 -mindepth 1 \
            -name "AF_v1r2_npp_s${OLD_DAY}${hh}*.txt" -a -size +120c \
            -printf "./process_npp '%p' '$OLD_JULIAN' > '%f.log' 2>&1"'\n' \
            >> command_file

        # J01 files for this hour which are at least 120 bytes in size:
        dir=$( decide_dir "$DCOM_VIIRS_J01" "${OLD_DAY}/af_viirs/" )
        find "$dir"  -maxdepth 1 -mindepth 1 \
            -name "AF_v1r2_j01_s${OLD_DAY}${hh}*.txt" -a -size +120c \
            -printf "./process_j01 '%p' '$OLD_JULIAN' > '%f.log' 2>&1"'\n' \
            >> command_file
    else
        # NPP files for this hour which are at least 120 bytes in size:
        dir=$( decide_dir "$DCOM_VIIRS_NPP" "${YYYYMMDD}/af_viirs/" )
        find "$dir" -maxdepth 1 -mindepth 1 \
            -name "AF_v1r2_npp_s${YYYYMMDD}${hh}*.txt" -a -size +120c \
            -printf "./process_npp '%p' '$START_JULIAN' > '%f.log' 2>&1"'\n' \
            >> command_file

        # J01 files for this hour which are at least 120 bytes in size:
        dir=$( decide_dir "$DCOM_VIIRS_J01" "${YYYYMMDD}/af_viirs" )
        find $dir -maxdepth 1 -mindepth 1 \
            -name "AF_v1r2_j01_s${YYYYMMDD}${hh}*.txt" -a -size +120c \
            -printf "./process_j01 '%p' '$START_JULIAN' > '%f.log' 2>&1"'\n' \
            >> command_file
    fi
done

if [[ -s ./command_file ]] ; then

    # Now generate the local scripts that process each file

    $CAT > process_npp <<EOF
#! /bin/ksh
set -xue # NOTE: set -e is necessary here
hour=\$(basename \$1 | cut -c22-25)
outfile=\$2\${hour}_vii3km.txt
local=\$( basename \$1 )
cp "\$1" "\$local"
${QC_VIIRS_EXEC} < "\$local" > "\$local.qc"
${RNPP_EXEC} "\$local.qc" "\$outfile" "${MCD_FILE}"
if [ -s "\$outfile" ] ; then
   $CP "\$outfile" "${DATAHOME_PROC}"
fi
EOF
    $CHMOD 755 process_npp

    cat > process_j01 <<EOF
#! /bin/ksh
set -xue # NOTE: set -e is necessary here
hour=\$(basename \$1 | cut -c22-25)
outfile=\$2\${hour}_noa3km.txt
local=\$( basename \$1 )
cp "\$1" "\$local"
${QC_VIIRS_EXEC} < "\$local" > "\$local.qc"
${RNOAA20_EXEC} "\$local.qc" "\$outfile" "${MCD_FILE}"
if [ -s "\$outfile" ] ; then
   $CP "\$outfile" "${DATAHOME_PROC}"
fi
EOF
    $CHMOD 755 process_j01

    $CAT > process_modis <<EOF
#! /bin/ksh
set -xue # NOTE: set -e is necessary here
local=\$( basename \$1 )
cp "\$1" "\$1".txt
cat "\$local"*.txt | ${QC_MODIS_EXEC} > "\$local.qc"
${RMODIS_EXEC} "\$local.qc" "\$2" "\$3" "\$4"
$CP -fp "\$5"*_mod_HRRR.txt $DATAHOME_PROC/.
EOF
    $CHMOD 755 process_modis

# Execute all obs processing commands.
    if [[ "$PREP_SMOKE_DEBUG" == "YES" ]] ; then
        $MPISERIAL -a ./command_file
    else
        $MPISERIAL ./command_file
    fi
    no_inputs=NO
else
    no_inputs=YES
fi # if there are commands to run

########################################################################

# Read all inputs from the prior section and convert to a binary file
# suitable for input to exhrrr_smoke_wrfinput.sh.ecf

cd ${DATAHOME_PROC}

daily3km=${START_JULIAN}${HH}_daily3km.txt
data_in_domain=NO

# Merge files into one
if [[ "$no_inputs" == YES ]] ; then
    echo "No inputs.  Making an empty daily3km file."
    if [[ "$PREP_SMOKE_DEBUG" == "YES" ]] ; then
        exit 2
    fi
    cat /dev/null > "$daily3km"
else
    cat_me=$( ls -1 | sort )
    if [[ "Q$cat_me" == Q ]] ; then
        echo "Inputs were availble, but no data was in the domain.  Making an empty daily3km file."
        cat /dev/null > "$daily3km"
    else
        cat $cat_me > "$daily3km"
        if [[ ! -s "$daily3km" ]] ; then
            echo "Inputs were available, but all processed data files are empty.  The daily3km file is empty too."
        else
            data_in_domain=YES
        fi
    fi
fi

# Integrate VIIRS data

${RUNSERIAL} ${FRP_EXEC} ${START_JULIAN}${HH}_daily3km.txt ${START_JULIAN}${HH}_frp3km.txt
${RUNSERIAL} ${BBM_EXEC} ${START_JULIAN}${HH}_frp3km.txt f${START_JULIAN}${HH}_bbm3km.txt ${MCD_FILE} ${BIOME_FILE}

# ----------------------------------------------------------------------

# Print run parameters
${ECHO}
${ECHO} "prep_chem_sources.ksh started at `${DATE}`"
${ECHO}
${ECHO} "DATAHOME = ${DATA}"
${ECHO} "START_TIME = ${START_TIME}"

# Set up the work directory and cd into it
cd ${workdir}
$RM -rf "${DATAHOME_PREP}"
${MKDIR} "${DATAHOME_PREP}"
cd "${DATAHOME_PREP}"

# Set up the sources and configuration.  Unused datasets are listed as
# subdirectories of /dev/null (which can never exist).
header='$RP_INPUT'
ending='$END'
$CAT > prep_chem_sources.inp << __EOFF
  ${header}
!#################################################################
!  CCATT-BRAMS/MCGA-CPTEC/WRF-Chem/FIM-Chem emission models CPTEC/INPE
!  version 1.6: April 2016
!  contact: gmai@cptec.inpe.br   - http://meioambiente.cptec.inpe.br
!  Modified by Ravan Ahmadov using Saulo's version
!#################################################################

!---------------- grid_type of the grid output
   grid_type= 'lambert',
   rams_anal_prefix = '/dev/null/rams_anal_prefix',

!---------------- date of emission
   ihour=${HOUR},
   iday=${DAY},
   imon=${MONTH},
   iyear=${YEAR},

 !---------------- select the sources datasets to be used
   use_retro =0,  ! 1 = yes, 0 = not
   retro_data_dir='/dev/null/RETRO_DATA',

   use_edgar =0,  ! 0 - not, 1 - Version 3, 2 - Version 4 for some species
   edgar_data_dir='/dev/null/EDGAR_DATA',

   use_gocart =0,
   gocart_data_dir='/dev/null/GOCART_DATA',

   use_streets =0,
   streets_data_dir='/dev/null/STREETS_DATA',

   use_seac4rs =0,
   seac4rs_data_dir='/dev/null/SEAC4RS_DATA',

   use_fwbawb =0,
   fwbawb_data_dir ='/dev/null/FWBAWB_DATA',

   use_bioge =0, ! 1 - geia, 2 - megan
   bioge_data_dir='/dev/null/EMISSION_DATA/MEGAN/2000',

   use_gfedv2=0,
   gfedv2_data_dir='/dev/null/EMISSION_DATA/GFEDv2-8days',

   use_bbem=2,  ! 1=traditional methodology ; 2 = FRE methodology
   use_bbem_plumerise=1,

!--------------------------------------------------------------------------------------------------

!---------------- if  the merging of gfedv2 with bbem is desired (=1, yes, 0 = no)
   merge_GFEDv2_bbem =0,

!---------------- Fire product for BBBEM/BBBEM-plumerise emission models
   bbem_fre_data_dir      ='${DATAHOME_PROC}/f'
   bbem_wfabba_data_dir   ='/dev/null/f',
   bbem_modis_data_dir    ='/dev/null/Global_MCD14DL_',
   bbem_inpe_data_dir     ='/dev/null/Focos',
   bbem_extra_data_dir    ='/dev/null/current.dat',

!---------------- veg type data set (dir + prefix)
   veg_type_data_dir      ='${VEG_TYPE_DATA}/IGBP',

!---------------- vcf type data set (dir + prefix)
   use_vcf = 0,
   vcf_type_data_dir      ='/dev/null/SURFACE_DATA/VCF/data_out/2005/VCF',
!---------------- olson data set (dir + prefix)
   olson_data_dir= '/dev/null/OLSON',

!---------------- carbon density data set (dir + prefix)

   carbon_density_data_dir='/dev/null/OGE',

!---------------- gocart background
   use_gocart_bg=0,
   gocart_bg_data_dir='/dev/null/GOCART_BG_DATA',

!---------------- volcanoes emissions
   use_volcanoes =0,
   volcano_index =1143, !REDOUBT

   use_these_values='NONE',

!---------------- degassing volcano emissions
   use_degass_volcanoes =0,
   degass_volc_data_dir ='/dev/null/EMISSION_DATA/VOLC_SO2',

!---------------- user specific  emissions directory
!---------------- Update for South America megacities
   user_data_dir='NONE',


!--------------------------------------------------------------------------------------------------
   pond=1,   ! mad/mfa  0 -> molar mass weighted
             !          1 -> Reactivity weighted

!---------------- for grid type 'll' or 'gg' only
   grid_resolucao_lon=0.2,
   grid_resolucao_lat=0.2,

   nlat=320,          ! if gg (only global grid)
   lon_beg   = -180., ! (-180.:+180.) long-begin of the output file
   lat_beg   =  -90., ! ( -90.:+90. ) lat -begin of the output file
   delta_lon =  360, ! total long extension of the domain (360 for global)
   delta_lat =  180, ! total lat  extension of the domain (180 for global)

!---------------- For regional grids (polar or lambert)

   NGRIDS   = 1,            ! Number of grids to run

   NNXP     = 1799,50,86,46,        ! Number of x gridpoints
   NNYP     = 1059,50,74,46,        ! Number of y gridpoints
   NXTNEST  = 0,1,1,1,          ! Grid number which is the next coarser grid
   DELTAX   = 3000.0,
   DELTAY   = 3000.0,         ! X and Y grid spacing

   ! Nest ratios between this grid and the next coarser grid.
   NSTRATX  = 1,2,3,4,           ! x-direction
   NSTRATY  = 1,2,3,4,           ! y-direction

   NINEST = 1,10,0,0,        ! Grid point on the next coarser
   NJNEST = 1,10,0,0,        !  nest where the lower southwest
                             !  corner of this nest will start.
                             !  If NINEST or NJNEST = 0, use CENTLAT/LON
   POLELAT  =  38.5, !-89.99,          ! If polar, latitude/longitude of pole point
   POLELON  = -97.5,         ! If lambert, lat/lon of grid origin (x=y=0.)

   STDLON   = -97.5,
   STDLAT1  = 38.5,           ! If polar for BRAMS, use 90.0 in STDLAT2
   STDLAT2  = 38.5,         ! If lambert, standard latitudes of projection
                            !(truelat2/truelat1 from namelist.wps, STDLAT1 < STDLAT2)
                            ! If mercator STDLAT1 = 1st true latitude
   CENTLAT  =  38.5, -89.99,  -23., 27.5,  27.5,
   CENTLON  = -97.5,  -46.,-80.5, -80.5,



!---------------- model output domain for each grid (only set up for rams)
   lati =  -90.,  -90.,   -90.,
   latf =  +90.,  +90.,   +90.,
   loni = -180., -180.,  -180.,
   lonf =  180.,  180.,   180.,

!---------------- project rams grid (polar sterogr) to lat/lon: 'YES' or 'NOT'
   proj_to_ll='NO',

!---------------- output file prefix (may include directory other than the current)
   chem_out_prefix = 'FIRE-HRRR_new',
   chem_out_format = 'vfm',
!---------------- convert to WRF/CHEM (yes,not)
  special_output_to_wrf = 'yes',
   
  ${ending}

__EOFF

cp ${PREP_EXEC} .
$RUNSERIAL ${PREP_EXEC}

if [[ "$SENDCOM" == YES ]] ; then
    cp -fp FIRE-HRRR_new-T-${YEAR}-${MONTH}-${DAY}-${HOUR}0000-g1-bb.bin \
        $COMOUT/hrrr.t${cyc}z.smoke.sources.bin
fi

${ECHO} "exrap_prep_smoke.sh.ecf completed at `${DATE}`"
