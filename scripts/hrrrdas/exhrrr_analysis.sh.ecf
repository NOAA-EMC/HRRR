#!/bin/ksh -l
################################################################################
####  UNIX Script Documentation Block
#                      .                                             .
# Script name:       exhrrr_analysis_sh.sms
# Script description:  runs the GSI and boundary update for the HRRR cycle
#
# Author:   Ming Hu / Geoff Manikin / Julia Zhu  Org: EMC       Date: 2011-10-01
#
# Script history log:
# 2014-08-01  C Alexander / M Hu / G Manikin / J Yang - HRRRv1
# 2016-02-05  C Alexander / G Manikin -  HRRRv2 
# 2018-01-24  B Blake / G Manikin / C Alexander - HRRRv3

ulimit -s 512000
set -x

# Set paths to unix commands
DATE=/bin/date
AWK="/bin/awk --posix"

# Create the working directory and cd into it
cd ${DATA}

# Set up some environment variables
export ATP_ENABLED=0
export MALLOC_MMAP_MAX=0
export MALLOC_TRIM_THRESHOLD_=134217728
export OMP_STACKSIZE=500M
export KMP_STACKSIZE=1024m
export OMP_NUM_THREADS=2

# Set to yes for faster collective ops (mpi reduce)
# but may not yield bitwise identical results from
# run to run when yes.
export MP_COLLECTIVE_OFFLOAD=yes

# create dirctory for member
echo "run forecst for member =",$ensmem
ensmemid=`printf %4.4i $ensmem`

if [ $ensmem -eq 00 ]; then
#  rm -rf mean
#  mkdir mean
  cd mean
else
#  rm -rf mem${ensmemid}
#  mkdir mem${ensmemid}
  cd mem${ensmemid}
fi

# Make sure START_TIME is in the correct format
START_TIME=${PDY}' '${cyc}
echo $START_TIME
echo $cyc
START_TIME=`echo "${START_TIME}" | sed 's/\([[:digit:]]\{2\}\)$/ \1/'`
START_TIME=`${DATE} -d "${START_TIME}"`

# produce binary date file, needed for radar diag files
ANALYSIS_TIME=`${DATE} "+%Y%m%d%H" -d "${START_TIME}"`
echo ${ANALYSIS_TIME} > idate.input
WRITE_IDATE=${EXEChrrr}/hrrr_write_idate
if [ ! -x "${WRITE_IDATE}" ]; then
  errmsg="ERROR: ${WRITE_IDATE} does not exist!"
  err_exit $errmsg
fi
cp ${WRITE_IDATE} hrrr_write_idate
runline="aprun -n 1 -N 1 ./hrrr_write_idate"
$runline >> $DATA/${pgmout}_date 2>errfile
export err=$?; err_chk


# Bring over background field (it's modified by GSI so we can't link to it)
time_str=`${DATE} "+%Y-%m-%d_%H_%M_%S" -d "${START_TIME}"`
echo " time_str = ${time_str}"

timestr1=`${DATE} +%Y%m%d%H%M -d "${START_TIME} 1 hours ago"`
# Look for background from pre-forecast background
if [ $ensmem -eq 00 ]; then
   bkfile=${HRRRDASGES}/hrrrdas_d01_${timestr1}f01_mem0001
   inputfile=${COMIN}/hrrr.t${cyc}z.wrfinput_d01.mean
else
   bkfile=${HRRRDASGES}/hrrrdas_d01_${timestr1}f01_mem${ensmemid}
   inputfile=${COMIN}/hrrr.t${cyc}z.wrfinput_d01.mem${ensmemid}
fi
if [ -r ${bkfile} ]; then
  echo " GSI background run using ${bkfile}"
  cp -p ${bkfile} ${inputfile}
  ln -sf ${inputfile} ./wrf_inout_d01
# calculate ensemble mean
  if [ $ensmem -eq 00 ]; then
     cp ${EXEChrrr}/hrrr_cal_ensmean . 
     ln -sf ${HRRRDASGES}/hrrrdas_d01_${timestr1}f01_mem00?? .
     runline="aprun -j1 -cc depth -n 12 -N 12 -d 2 /usr/bin/env OMP_NUM_THREADS=2 ./hrrr_cal_ensmean 2 ./ wrf_inout_d01 hrrrdas_d01_${timestr1}f01_mem0 36 : -j1 -cc depth -n 27 -N 9 -d 2 /usr/bin/env OMP_NUM_THREADS=2 ./hrrr_cal_ensmean 2 ./ wrf_inout_d01 hrrrdas_d01_${timestr1}f01_mem0 36"
     $runline
  fi
# No background available so abort
else
  echo "${bkfile} does not exist!!"
  if [ ${cyc} -eq 09 -o ${cyc} -eq 21 ]; then
     echo "Wanring: skip GSI for cold start" > ${COMOUT}/diagdone${cyc}00.${ensmemid}
     exit 0
  fi
  errmsg="FATAL ERROR: No background file for analysis at ${time_run}!!!!"
  echo $errmsg
  echo " FATAL ERROR: Cycle ${PDY}${cyc}: GSI failed because of no background" 
  err_exit $errmsg
fi
# now check domain 2
if [ $ensmem -eq 00 ]; then
   bkfile=${HRRRDASGES}/hrrrdas_d02_${timestr1}f01_mem0001
   inputfile=${COMIN}/hrrr.t${cyc}z.wrfinput_d02.mean
else
   bkfile=${HRRRDASGES}/hrrrdas_d02_${timestr1}f01_mem${ensmemid}
   inputfile=${COMIN}/hrrr.t${cyc}z.wrfinput_d02.mem${ensmemid}
fi
if [ -r ${bkfile} ]; then
  echo " GSI background run using ${bkfile}"
  cp -p ${bkfile} ${inputfile}
  ln -sf ${inputfile} ./wrf_inout_d02
# calculate ensemble mean
  if [ $ensmem -eq 00 ]; then
#     cp ${EXEChrrr}/hrrr_cal_ensmean . 
     ln -sf ${HRRRDASGES}/hrrrdas_d02_${timestr1}f01_mem00?? .
     runline="aprun -j1 -cc depth -n 24 -N 24 -d 1 /usr/bin/env OMP_NUM_THREADS=1 ./hrrr_cal_ensmean 2 ./ wrf_inout_d02 hrrrdas_d02_${timestr1}f01_mem0 36 : -j1 -cc depth -n 36 -N 12 -d 2 /usr/bin/env OMP_NUM_THREADS=2 ./hrrr_cal_ensmean 2 ./ wrf_inout_d02 hrrrdas_d02_${timestr1}f01_mem0 36"
     $runline
  fi
# No background available so abort
else
  echo "${bkfile} does not exist!!"
  errmsg="FATAL ERROR: No background file for analysis at ${time_run}!!!!"
  echo $errmsg
  echo " FATAL ERROR: Cycle ${PDY}${cyc}: GSI failed because of no background" 
  err_exit $errmsg
fi


#  need to use the "early" data at 00/12z since the regular RAP dumps
#     occur later at these times
if [ ${cyc} -eq 00 -o ${cyc} -eq 12 ]; then
  PREPBUFR=${COMRAP_E}/rap_e.${PDY}
  prepsuffix=rap_e
else
  PREPBUFR=${COMRAP}/rap.${PDY}
  prepsuffix=rap
fi

# prepbufr section
if [ -r "${PREPBUFR}/${prepsuffix}.t${cyc}z.prepbufr.tm00" ]; then
 cp ${PREPBUFR}/${prepsuffix}.t${cyc}z.prepbufr.tm00 .
 mv ${prepsuffix}.t${cyc}z.prepbufr.tm00 newgblav.${PDY}.rap.t${cyc}z.prepbufr
 ln -sf newgblav.${PDY}.rap.t${cyc}z.prepbufr ./prepbufr
else
 echo "Warning: ${PREPBUFR}/${prepsuffix}.t${cyc}z.prepbufr.tm00 does not exist!"
fi

ls -lrt 
# Link to binary radar data
obsfile=${PREPDIR2}/hrrr.t${cyc}z.NSSLRefInGSI_d01.bufr
if [ -r "${obsfile}" ]; then
  ln -sf ${obsfile} ./refInGSI
else
  echo "Warning: ${obsfile} does not exist!"
fi

obsfile=${PREPDIR2}/hrrr.t${cyc}z.Gridded_ref_d01.nc
if [ -r "${obsfile}" ]; then
  ln -sf ${obsfile} ./dbzobs.nc
else
  echo "Warning: ${obsfile} does not exist!"
fi

obsfile=${PREPDIR2}/hrrr.t${cyc}z.NASALaRCCloudInGSI_d01.bufr
if [ -r "${obsfile}" ]; then
  ln -sf ${obsfile} ./larcInGSI
else
  echo "Warning: ${obsfile} does not exist!"
fi

# add radial velocity data
if [ -r "${PREPBUFR}/${prepsuffix}.t${cyc}z.nexrad.tm00.bufr_d" ]; then
  ln -sf ${PREPBUFR}/${prepsuffix}.t${cyc}z.nexrad.tm00.bufr_d ./l2rwbufr
else
  echo "Warning: ${PREPBUFR}/${prepsuffix}.t${cyc}z.nexrad.tm00.bufr_d is not available"
fi

# add SATWND data
if [ -r "${PREPBUFR}/${prepsuffix}.t${cyc}z.satwnd.tm00.bufr_d" ]; then
  ln -sf ${PREPBUFR}/${prepsuffix}.t${cyc}z.satwnd.tm00.bufr_d ./satwndbufr
else
  echo "Warning: ${PREPBUFR}/${prepsuffix}.t${cyc}z.satwnd.tm00.bufr_d is not available"
fi

# Set fixed files
#   berror   = forecast model background error statistics
#   specoef  = CRTM spectral coefficients
#   trncoef  = CRTM transmittance coefficients
#   RTMEMIS = CRTM coefficients for IR sea surface emissivity model
#   aerocoef = CRTM coefficients for aerosol effects
#   cldcoef  = CRTM coefficients for cloud effects
#   satinfo  = text file with information about assimilation of brightness temperatures
#   satangl  = angle dependent bias correction file (fixed in time)
#   pcpinfo  = text file with information about assimilation of prepcipitation rates
#   ozinfo   = text file with information about assimilation of ozone data
#   errtable = text file with obs error for conventional data (regional only)
#   convinfo = text file with information about assimilation of conventional data
#   bufrtable= text file ONLY needed for single obs test (oneobstest=.true.)
#   bftab_sst= bufr table for sst ONLY needed for sst retrieval (retrieval=.true.)

anavinfo=${FIXhrrr}/hrrrdas_anavinfo_arw_netcdf_HRRRENS
BERROR=${FIXhrrr}/hrrr_berror_stats_global
# SATANGL=${FIXhrrr}/hrrr_global_satangbias.txt
SATINFO=${FIXhrrr}/hrrr_global_satinfo.txt

RTMAERO=${FIXcrtm_anal}/AerosolCoeff.bin
RTMCLDS=${FIXcrtm_anal}/CloudCoeff.bin
RTMEMIS_IRwater=${FIXcrtm_anal}/Nalli.IRwater.EmisCoeff.bin
RTMEMIS_IRice=${FIXcrtm_anal}/NPOESS.IRice.EmisCoeff.bin
RTMEMIS_IRland=${FIXcrtm_anal}/NPOESS.IRland.EmisCoeff.bin
RTMEMIS_IRsnow=${FIXcrtm_anal}/NPOESS.IRsnow.EmisCoeff.bin
RTMEMIS_VISice=${FIXcrtm_anal}/NPOESS.VISice.EmisCoeff.bin
RTMEMIS_VISland=${FIXcrtm_anal}/NPOESS.VISland.EmisCoeff.bin
RTMEMIS_VISsnow=${FIXcrtm_anal}/NPOESS.VISsnow.EmisCoeff.bin
RTMEMIS_VISwater=${FIXcrtm_anal}/NPOESS.VISwater.EmisCoeff.bin
RTMEMIS_MWwater=${FIXcrtm_anal}/FASTEM5.MWwater.EmisCoeff.bin

CONVINFO=${FIXhrrr}/hrrrdas_regional_convinfo.15km.txt
#CONVINFO=${FIXhrrr}/hrrr_nam_regional_convinfo
OZINFO=${FIXhrrr}/hrrr_global_ozinfo.txt    
PCPINFO=${FIXhrrr}/hrrr_global_pcpinfo.txt

OBERROR=${FIXhrrr}/hrrr_nam_errtable.r3dv
AIRCRAFTREJECTLIST=${FIXhrrr}/hrrr_current_bad_aircraft.txt   # aircraft reject list
SURFACEUSELIST=${FIXhrrr}/hrrr_current_mesonet_uselist.txt # mesonet use list
SURFACEPROVIDERLIST=${FIXhrrr}/hrrr_gsd_sfcobs_provider.txt # mesonet network use list

# Fixed fields
 cp $anavinfo anavinfo
 cp $BERROR   berror_stats
# cp $SATANGL  satbias_angle
 cp $SATINFO  satinfo
 cp $CONVINFO convinfo
 cp $OZINFO   ozinfo
 cp $PCPINFO  pcpinfo
 cp $OBERROR  errtable
 cp $AIRCRAFTREJECTLIST current_bad_aircraft
#cp $SURFACEUSELIST gsd_sfcobs_uselist.txt
 cp $SURFACEPROVIDERLIST gsd_sfcobs_provider.txt
 
#    # CRTM Spectral and Transmittance coefficients
ln -sf $RTMAERO  ./AerosolCoeff.bin
ln -sf $RTMCLDS  ./CloudCoeff.bin
ln -sf $RTMEMIS_IRwater ./Nalli.IRwater.EmisCoeff.bin
ln -sf $RTMEMIS_IRice ./NPOESS.IRice.EmisCoeff.bin
ln -sf $RTMEMIS_IRsnow ./NPOESS.IRsnow.EmisCoeff.bin
ln -sf $RTMEMIS_IRland ./NPOESS.IRland.EmisCoeff.bin
ln -sf $RTMEMIS_VISice ./NPOESS.VISice.EmisCoeff.bin
ln -sf $RTMEMIS_VISland ./NPOESS.VISland.EmisCoeff.bin
ln -sf $RTMEMIS_VISsnow ./NPOESS.VISsnow.EmisCoeff.bin
ln -sf $RTMEMIS_VISwater ./NPOESS.VISwater.EmisCoeff.bin
ln -sf $RTMEMIS_MWwater ./FASTEM5.MWwater.EmisCoeff.bin

# Copy CRTM coefficient files based on entries in satinfo file
for file in `awk '{if($1!~"!"){print $1}}' ./satinfo | sort | uniq` ;do 
   ln -sf ${FIXcrtm_anal}/${file}.SpcCoeff.bin ./
   ln -sf ${FIXcrtm_anal}/${file}.TauCoeff.bin ./
done

# Only need this file for single obs test
 bufrtable=${PARMhrrr}/hrrr_prepobs_prep.bufrtable
 cp $bufrtable ./prepobs_prep.bufrtable

## 
## Link to pre-processed GFS EnKF forecast members
ifhyb=.false.

# Set some parameters for use by the GSI executable and to build the namelist
# Build the GSI namelist on-the-fly
if [ $ensmem -eq 00 ]; then
   cp ${PARMhrrr}/hrrrdas_gsiparm.anl.mean gsiparm.anl
else
   cp ${PARMhrrr}/hrrrdas_gsiparm.anl  gsiparm.anl
fi

ecflow_client --event ready2sub      #for next batch diag jobs to run
export pgm=hrrr_gsi
. prep_step

startmsg
if [ $ensmem -gt 00 ]; then
   ln -sf ../mean/d01/obs_input.* .
fi
ln -sf wrf_inout_d01 wrf_inout
cp ${EXEChrrr}/hrrr_gsi .
runline="aprun -j1 -cc depth -n 48 -N 12 -d 2 ./hrrr_gsi"
$runline < gsiparm.anl >> $DATA/${pgmout}_d01 2>errfile
export err=$?; err_chk

# Loop over first and last outer loops to generate innovation
# diagnostic files for indicated observation types (groups)
#
# NOTE:  Since we set miter=2 in GSI namelist SETUP, outer
#        loop 03 will contain innovations with respect to 
#        the analysis.  Creation of o-a innovation files
#        is triggered by write_diag(3)=.true.  The setting
#        write_diag(1)=.true. turns on creation of o-g
#        innovation files.
#

if [ $ensmem -eq 00 ]; then
   mkdir d01
   mv obs_input.* d01/.
fi

loops="01"
for loop in $loops; do

case $loop in
  01) string=ges;;
  03) string=anl;;
   *) string=$loop;;
esac

#  Collect diagnostic files for obs types (groups) below
   listall="conv radardbz"
   for type in $listall; do
      count=`ls pe*.${type}_${loop}* | wc -l`
      if [[ $count -gt 0 ]]; then
          if [ "$type" = "radardbz" ]; then
             `cat idate.output pe*.${type}_${loop}* > diag_${type}_${string}.${PDY}${cyc}`
          else
             `cat pe*.${type}_${loop}* > diag_${type}_${string}.${PDY}${cyc}`
          fi
          if [ $ensmem -eq 00 ]; then
            cp diag_${type}_${string}.${PDY}${cyc} ${COMOUT}/diag_${type}_${string}.${PDY}${cyc}.d01.mean
          else
            cp diag_${type}_${string}.${PDY}${cyc} ${COMOUT}/diag_${type}_${string}.${PDY}${cyc}.d01.mem${ensmemid}
          fi
      fi
   done
done

export err=$?; err_chk
mv fort.201 fit_p1
mv fort.202 fit_w1
mv fort.203 fit_t1
mv fort.204 fit_q1
mv fort.205 fit_pw1
mv fort.206 fit_oz1
mv fort.207 fit_rad1
mv fort.208 fit_pcp1
mv fort.209 fit_rw1
mv fort.213 fit_sst1
mv fort.238 fit_dbz1

cat fit_p1 fit_w1 fit_t1 fit_q1 fit_pw1 fit_rad1 fit_rw1 fit_dbz1 > ${COMOUT}/hrrr_d01.t${cyc}z.fits.${tmmark}.mem${ensmemid}
cat fort.210 fort.211 fort.212 fort.214 fort.215 fort.217 fort.220 > ${COMOUT}/hrrr_d01.t${cyc}z.fits2.${tmmark}.mem${ensmemid}
ls -l

# now run gsi for d02
rm pe0*
rm wrf_inout
if [ $ensmem -gt 00 ]; then
   rm obs_input.*
   ln -sf ../mean/d02/obs_input.* .
fi
ln -sf wrf_inout_d02 wrf_inout

ls -lrt
# Link to binary radar data
obsfile=${PREPDIR2}/hrrr.t${cyc}z.NSSLRefInGSI_d02.bufr
if [ -r "${obsfile}" ]; then
  rm refInGSI
  ln -sf ${obsfile} ./refInGSI
else
  echo "Warning: ${obsfile} does not exist!"
fi

obsfile=${PREPDIR2}/hrrr.t${cyc}z.Gridded_ref_d02.nc
if [ -r "${obsfile}" ]; then
  rm  dbzobs.nc
  ln -sf ${obsfile} ./dbzobs.nc
else
  echo "Warning: ${obsfile} does not exist!"
fi

obsfile=${PREPDIR2}/hrrr.t${cyc}z.NASALaRCCloudInGSI_d02.bufr
if [ -r "${obsfile}" ]; then
  rm larcInGSI
  ln -sf ${obsfile} ./larcInGSI
else
  echo "Warning: ${obsfile} does not exist!"
fi

CONVINFO=${FIXhrrr}/hrrrdas_regional_convinfo.3km.txt
cp $CONVINFO convinfo

cp ${EXEChrrr}/hrrr_gsi .
runline="aprun -j1 -cc depth -n 48 -N 12 -d 2 ./hrrr_gsi"
$runline < gsiparm.anl >> $DATA/${pgmout}_d02 2>errfile
export err=$?; err_chk

# Loop over first and last outer loops to generate innovation
# diagnostic files for indicated observation types (groups)
#
# NOTE:  Since we set miter=2 in GSI namelist SETUP, outer
#        loop 03 will contain innovations with respect to 
#        the analysis.  Creation of o-a innovation files
#        is triggered by write_diag(3)=.true.  The setting
#        write_diag(1)=.true. turns on creation of o-g
#        innovation files.
#
if [ $ensmem -eq 00 ]; then
   mkdir d02
   mv obs_input.* d02/.
fi

loops="01"
for loop in $loops; do

case $loop in
  01) string=ges;;
  03) string=anl;;
   *) string=$loop;;
esac

#  Collect diagnostic files for obs types (groups) below
   listall="conv radardbz"
   for type in $listall; do
      count=`ls pe*.${type}_${loop}* | wc -l`
      if [[ $count -gt 0 ]]; then
          if [ "$type" = "radardbz" ]; then
             `cat idate.output pe*.${type}_${loop}* > diag_${type}_${string}.${PDY}${cyc}`
          else
             `cat pe*.${type}_${loop}* > diag_${type}_${string}.${PDY}${cyc}`
          fi
          if [ $ensmem -eq 00 ]; then
            cp diag_${type}_${string}.${PDY}${cyc} ${COMOUT}/diag_${type}_${string}.${PDY}${cyc}.d02.mean
          else
            cp diag_${type}_${string}.${PDY}${cyc} ${COMOUT}/diag_${type}_${string}.${PDY}${cyc}.d02.mem${ensmemid}
          fi
      fi
   done
done

export err=$?; err_chk
mv fort.201 fit_p1
mv fort.202 fit_w1
mv fort.203 fit_t1
mv fort.204 fit_q1
mv fort.205 fit_pw1
mv fort.206 fit_oz1
mv fort.207 fit_rad1
mv fort.208 fit_pcp1
mv fort.209 fit_rw1
mv fort.213 fit_sst1
mv fort.238 fit_dbz1

cat fit_p1 fit_w1 fit_t1 fit_q1 fit_pw1 fit_rad1 fit_rw1 fit_dbz1 > ${COMOUT}/hrrr_d02.t${cyc}z.fits.${tmmark}.mem${ensmemid}
cat fort.210 fort.211 fort.212 fort.214 fort.215 fort.217 fort.220 > ${COMOUT}/hrrr_d02.t${cyc}z.fits2.${tmmark}.mem${ensmemid}

#cp wrf_inout ${COMOUT}/hrrr.t${cyc}z.wrf_inout

# Create a flag file and check to see if all 37 flag files are available
echo "Obsdiag is complete for member ${ensmemid}" > ${COMOUT}/diagdone${cyc}00.${ensmemid}

msg="JOB $job HAS COMPLETED NORMALLY."
postmsg "$jlogfile" "$msg"

exit 0
